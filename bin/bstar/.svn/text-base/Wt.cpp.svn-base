/******************************************************************************
 * Wt.cpp                                                                     *
 *                                                                            *
 * Top Level file in analysis package                                         *
 * Drives the package                                                         *
 *                                                                            *
 * This file is the main file which will loop over all of the events, make    *
 * cuts and generate histograms.                                              *
 *                                                                            *
 * For general information on the analysis package as a whole, see            *
 * https://hep.pa.msu.edu/twiki/bin/view/AtlasSingleTop/HowToUseTheAnalysisFramework *
 *                                                                            *
 * Modifications:                                                             *
 *   23 Nov 2010 - H. ZHANG, modify first version from SandB analysis         *
 *****************************************************************************/
#define Global_cxx
#include "SingleTopRootAnalysis/Base/Dictionary/AnalysisMain.hpp"
#include <iostream>
#include <string>

// Include histogramming classes
#include "SingleTopRootAnalysis/Cuts/Weights/EventWeight.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingElectron.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingMuon.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingTau.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingMET.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingJet.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingTaggedJet.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingUnTaggedJet.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingZee.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingZmumu.hpp"
#include "SingleTopRootAnalysis/Histogramming/Recon/HistogrammingNPvtx.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCParticle.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCElectron.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCMuon.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCTau.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCJet.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCTop.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCW.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCBQuark.hpp"
//#include "SingleTopRootAnalysis/Histogramming/Truth/HistogrammingMCCQuark.hpp"
// Include cuts classes
#include "SingleTopRootAnalysis/Cuts/Other/CutBasic.hpp"
#include "SingleTopRootAnalysis/Cuts/Jet/CutJetN.hpp"
#include "SingleTopRootAnalysis/Cuts/TaggedJet/CutTaggedJetPt1.hpp"
#include "SingleTopRootAnalysis/Cuts/Jet/CutJetPt1.hpp"
#include "SingleTopRootAnalysis/Cuts/TaggedJet/CutTaggedJetEta1.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutMissingEt.hpp"
#include "SingleTopRootAnalysis/Cuts/Trigger/CutTriggerOR.hpp"
#include "SingleTopRootAnalysis/Cuts/Muon/CutMuonN.hpp"
#include "SingleTopRootAnalysis/Cuts/Electron/CutElectronN.hpp"
#include "SingleTopRootAnalysis/Cuts/Muon/CutMuonTighterPt.hpp"
#include "SingleTopRootAnalysis/Cuts/Electron/CutElectronTighterPt.hpp"
#include "SingleTopRootAnalysis/Cuts/Electron/CutElectronTriggerMatch.hpp"
#include "SingleTopRootAnalysis/Cuts/TaggedJet/CutTaggedJetN.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutTriangularWtMET.hpp"
#include "SingleTopRootAnalysis/Histogramming/Topological/HistogrammingTV_Float.hpp"
#include "SingleTopRootAnalysis/Histogramming/Topological/HistogrammingWtDiLepTopology.hpp"
#include "SingleTopRootAnalysis/Histogramming/Other/HistogrammingEventList.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutDecisionTree.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutMVATriggerMatch.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutMVATriggerSelection.hpp"
#include "SingleTopRootAnalysis/Cuts/Lepton/CutLeptonOppositeCharge.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutZveto.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutTriggerSelection.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutBkgdTriggerMatch.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutBkgdTriggerSelection.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutLeptonTight.hpp"
#include "SingleTopRootAnalysis/Cuts/Electron/CutElectronQuality.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutSumEt.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutTriangularSumDeltaPhiLepMET.hpp"

#include "SingleTopRootAnalysis/Base/CutFlow/CutListProcessor.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutHFOR.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutBadPileupEvent.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutBadJet.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutEMuOverlap.hpp"

#include "SingleTopRootAnalysis/Cuts/Other/CutGoodRunList.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutLarBurst.hpp"
#include "SingleTopRootAnalysis/Cuts/Other/CutPrimaryVertex.hpp"
using std::cout;
using std::endl;

/******************************************************************************
 * int main(int argc, char **argv)                                            *
 *                                                                            *
 * Main Routine                                                               *
 *                                                                            *
 * Input:  Command line arguements                                            *
 * Output: Returns 0 of successful                                            *
 ******************************************************************************/
// Only declare main if not in CINT (not interactive?)
#ifndef __CINT__
int main(int argc, char **argv) 
#endif
{
  cout << "<driver> Starting parton_analysis" << endl;
  gROOT->ProcessLine("#include <vector>");

  bool doHist = false;
  /////////////////////////////////////////////////////////////////////////////////
  // Decleartions and Instantiations
  /////////////////////////////////////////////////////////////////////////////////
  // Instantiate the analysis class
  AnalysisMain mystudy;
  TChain *chainReco       = new TChain("LooseTopInputsTree");
  TChain *chainTruth      = new TChain("TruthTree");
  TChain *chainTrigger    = new TChain("TriggerTree");
  TChain *chainInfo       = new TChain("InfoTree");
  TChain *chainDecision   = new TChain("DecisionTree");
  TChain *chainFastSim    = new TChain("FastSimTree");

 
 // Check command line for Fast Running
  // In Fast Running only a few cuts are made and histograms filled
  Bool_t doFast = kFALSE;
  string mcStr="";
  string evtListFileName="";
  string bkgdTree="";
  Bool_t doMC = kFALSE;
  for (int i = 1; i < argc; ++i) {
    //cout<<"Command line parameter "<<i<<" is "<<argv[i]<<endl;
    if (!strcmp(argv[i], "-inlist")) {
	string ListName = (string)(argv[i+1]);
	int b = ListName.find("SingleTop.");
	evtListFileName="WtDiElectron_"+ListName.substr(b)+".lst.root";
	cout << "evtListFileName : " << evtListFileName << endl;
    }
    if (!strcmp(argv[i], "-fast")) {
      doFast = kTRUE;
      cout << "Driver: Fast running " << endl;
    }//if fast
    if (!strcmp(argv[i], "-mc")) {
      doMC = kTRUE;
      cout << "Driver: This is a MC sample " << endl;
      //Number of total events automatically includes the number with MCatNLO weights, but the events themselves will not be weighted in current code version unless this flag is called
    }//if mc
    if (!strcmp(argv[i], "-MCatNLO")) {
      mcStr=mcStr+"MCatNLO";
      cout << "Driver: This is MCatNLO " << endl;
      //Number of total events automatically includes the number with MCatNLO weights, but the events themselves will not be weighted in current code version unless this flag is called
    }//if MCatNLO
    if (!strcmp(argv[i], "-PileUpWgt")) {
      mcStr=mcStr+"PileUpWgt";
      cout << "Driver: Use PileUpWgt " << endl;
    }//if PileUpWgt
    if (!strcmp(argv[i], "-UseTotalEvtFromFile")) {
      mcStr=mcStr+"UseTotalEvtFromFile";
      cout << "Driver: UseTotalEvtFromFile " << endl;
    }//if UseTotalEvtFromFile
    if (!strcmp(argv[i],"-BkgdTreeName")){
      // Check if BkgdTree is specified.  
      if (argc < i+1) {
	cout << "<AnalysisMain::ParseCmdLine> " << "ERROR: Missing Value for tree name for multivariate variables -BkgdTree!" << endl;
	return 1;
      } //if
      mystudy.SetBkgdTreeName(argv[i+1]);
      bkgdTree = argv[i+1];
    }// if BkgdTreeName
  } // for
  TChain *chainBkgd = new TChain(mystudy.GetBkgdTreeName());//if nothing specified on commandline, this is just a "" string, which is ok if you don't want to use this chain (don't want a tree of multivariate variables).

  //////////////////////////////////////////////////////////////////////////////////
  // Parse the Command Line (the rest of it)
  //////////////////////////////////////////////////////////////////////////////////
  cout<<"USING THE TOPINPUTS TREE"<<endl;
  Int_t parseReturnValue = mystudy.ParseCmdLine(argc,argv,chainReco,chainTruth,chainTrigger,chainInfo,chainDecision, chainFastSim, chainBkgd);
  cout<<"ParseCmdLine done"<<endl;
  if(parseReturnValue != 0) return parseReturnValue;

  /////////////////////////////////////////////////////////////////////////////////
  // Define a Particle class to be the same as the AnalysisMain class
  /////////////////////////////////////////////////////////////////////////////////
  EventContainer *particlesObj = &mystudy;
  
  /////////////////////////////////////////////////////////////////////////////////
  // Add Cuts and Histograms applicable to Fast and Full Analyses
  /////////////////////////////////////////////////////////////////////////////////
  // ******** Cuts and Histograms applied to all studies ********
  // First always add the EventWeight
  //Uses MCatNLO events.  If want to not use MCatNLO weights, can add a method to analysis main to grab the _totalEvents value, which is also printed out to the log file/screen.
  //NOTE: To include pileup, you need to change the first false to true, and then add the following type of lines to your cuts config file (data file is different for muons and electrons because of different trigger):
  //Weight.Pileup.Data.File: externaltools/pileup/histograms/ilumicalc_histograms_EF_e20_medium_178044-180242.root
  //Weight.Pileup.MC.File: externaltools/pileup/histograms/mu_mc10a.root
  cout << "mcStr = " << mcStr << endl; 
  if(doMC) mystudy.AddCut(new EventWeight(particlesObj,mystudy.GetTotalMCatNLOEvents(), mcStr, false));
  else mystudy.AddCut(new EventWeight(particlesObj,mystudy.GetTotalMCatNLOEvents(), mcStr, false));
  mystudy.AddCut(new CutHFOR(particlesObj));
  mystudy.AddCut(new CutBadPileupEvent(particlesObj));//nessesary to remove some bad pileup due to minbias event issue
  if(!doMC) mystudy.AddCut(new CutGoodRunList(particlesObj));

  if(!doMC) mystudy.AddCut(new CutLarBurst(particlesObj));
  mystudy.AddCut(new CutPrimaryVertex(particlesObj));
//   mystudy.AddCut(new CutDecisionTree(particlesObj,mystudy.GetBkgdTreeName().Remove(mystudy.GetBkgdTreeName().Index("Tree"))));//want branch name in DecisionTree to cut on
   // mystudy.AddCut(new CutDecisionTree(particlesObj,mystudy.GetMVATreeName().Remove(mystudy.GetMVATreeName().Index("Tree"))));//want branch name in DecisionTree to cut on
   //   mystudy.AddCut(new CutBkgdTriggerMatch(particlesObj));
//   mystudy.AddCut(new CutElectronQuality(particlesObj, "Tight"));
//     mystudy.AddCut(new CutBkgdTriggerSelection(particlesObj));

  
   // Histograms: Some MC particle properties
    //mystudy.AddCut(new HistogrammingMCParticle(particlesObj));
    // Histograms: Some MC Electron properties
    //mystudy.AddCut(new HistogrammingMCElectron(particlesObj));
    // Histograms: Some MC Muon properties
    //mystudy.AddCut(new HistogrammingMCMuon(particlesObj));
    // Histograms: Some MC jet properties
    //mystudy.AddCut(new HistogrammingMCJet(particlesObj));
    // Histograms: MCTop Properties--not often used
    // mystudy.AddCut(new HistogrammingMCTop(particlesObj));
    // Histograms: MCW Properties--not often used
    // mystudy.AddCut(new HistogrammingMCW(particlesObj));
     // Histograms: MCTau Properties
    //mystudy.AddCut(new HistogrammingMCTau(particlesObj));
     // Histograms: MCBQuark Properties
    //mystudy.AddCut(new HistogrammingMCBQuark(particlesObj));
     // Histograms: MCCQuark Properties
    //mystudy.AddCut(new HistogrammingMCCQuark(particlesObj));
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Histograms: nPvtx
    if(doHist) mystudy.AddCut(new HistogrammingNPvtx(particlesObj));
    // Histograms: Muon Properties
    if(doHist) mystudy.AddCut(new HistogrammingMuon(particlesObj, "All"));
    if(doHist) mystudy.AddCut(new HistogrammingMuon(particlesObj, "Tight"));
    // Cuts: Electron Trigger
    mystudy.AddCut(new CutTriggerSelection(particlesObj));
    mystudy.AddCut(new CutElectronTriggerMatch(particlesObj, "Tight"));
    if(!doMC) mystudy.AddCut(new CutBadJet(particlesObj));
    // Histograms: nPvtx
    if(doHist) mystudy.AddCut(new HistogrammingNPvtx(particlesObj));
    // Histograms: Electron Properties
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "All"));
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "Tight"));
    // Histograms: Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingJet(particlesObj));
    // Histograms: b-Tagged Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingTaggedJet(particlesObj));
    // Histograms: Tau Properties
//    mystudy.AddCut(new HistogrammingTau(particlesObj));
    // Histograms: MET
    if(doHist) mystudy.AddCut(new HistogrammingMET(particlesObj));
  
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//    // ******** Lepton Cuts ********
    // Cut: Number of Tight Electrons
    mystudy.AddCut(new CutElectronN(particlesObj, "Tight")); //require that lepton to be isolated, central, high pt
    mystudy.AddCut(new CutElectronTighterPt(particlesObj, "Tight")); //require that new Pt cut for leading and subleading electron
    // Cut: Number of Tight Muons
    mystudy.AddCut(new CutMuonN(particlesObj, "Tight"));     //require that lepton to be isolated, central, high pt
    mystudy.AddCut(new CutMuonTighterPt(particlesObj, "Tight")); //require that new Pt cut for leading and subleading muon
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Histograms: nPvtx
    if(doHist) mystudy.AddCut(new HistogrammingNPvtx(particlesObj));
    // Histograms: Electron Properties
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "All"));
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "Tight"));
    // Histograms: Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingJet(particlesObj));
    // Histograms: b-Tagged Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingTaggedJet(particlesObj));
    // Histograms: Tau Properties
//    mystudy.AddCut(new HistogrammingTau(particlesObj));
    // Histograms: MET
    if(doHist) mystudy.AddCut(new HistogrammingMET(particlesObj));
    // Histograms: Zee
    if((bkgdTree.find("DiElectron") == 0)&&doHist ) mystudy.AddCut(new HistogrammingZee(particlesObj, "Tight"));
    if((bkgdTree.find("DiMuon") == 0) && doHist) mystudy.AddCut(new HistogrammingZmumu(particlesObj, "Tight"));


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Jet Cuts ********
    // Cut: Number of Jets that don't overlap with electrons
    mystudy.AddCut(new CutJetPt1(particlesObj));
    mystudy.AddCut(new CutJetN(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Triangular Sum Delta Phi (Lept, MET) Cuts ********
    mystudy.AddCut(new CutTriangularSumDeltaPhiLepMET(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Histograms: Electron Properties
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "All"));
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "Tight"));
    // Histograms: Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingJet(particlesObj));
    // Histograms: b-Tagged Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingTaggedJet(particlesObj));
    // Histograms: Tau Properties
//    mystudy.AddCut(new HistogrammingTau(particlesObj));
    // Histograms: MET
    if(doHist) mystudy.AddCut(new HistogrammingMET(particlesObj));
    // Histograms: Zee
    if(bkgdTree.find("DiElectron") == 0 ) {
      if(doHist) mystudy.AddCut(new HistogrammingZee(particlesObj, "Tight"));
      mystudy.AddCut(new HistogrammingZee(particlesObj, "Tight",true));  // use pileup reweights to reweight the distributions
    }
    if(bkgdTree.find("DiMuon") == 0 ) {
      if(doHist) mystudy.AddCut(new HistogrammingZmumu(particlesObj, "Tight"));
      mystudy.AddCut(new HistogrammingZmumu(particlesObj, "Tight",true));
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Tagged Jet Cuts ********
    // Cut: Number of Tagged Jets
    // mystudy.AddCut(new CutTaggedJetN(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Missing ET Cuts ********
    // Cut: Missing Et (don't do for FastSim)
    mystudy.AddCut(new CutMissingEt(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Histograms: Electron Properties
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "All"));
    if(doHist) mystudy.AddCut(new HistogrammingElectron(particlesObj, "Tight"));
    // Histograms: Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingJet(particlesObj));
    // Histograms: b-Tagged Jet Properties 
    if(doHist) mystudy.AddCut(new HistogrammingTaggedJet(particlesObj));
    // Histograms: Tau Properties
//    mystudy.AddCut(new HistogrammingTau(particlesObj));
    // Histograms: MET
    if(doHist) mystudy.AddCut(new HistogrammingMET(particlesObj));
    // Histograms: Zee
    if((bkgdTree.find("DiElectron") == 0) && doHist ) mystudy.AddCut(new HistogrammingZee(particlesObj, "Tight"));
    if((bkgdTree.find("DiMuon") == 0) && doHist ) mystudy.AddCut(new HistogrammingZmumu(particlesObj, "Tight"));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** SameCharge Lepton Cuts ********
    mystudy.AddCut(new CutLeptonOppositeCharge(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Z veto Cuts ********
    mystudy.AddCut(new CutZveto(particlesObj, "Tight"));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ******** Tri angle Cuts ********
    //mystudy.AddCut(new CutTriangularWtMET(particlesObj));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Cut: Tagged jet ET of Jet 1
    //mystudy.AddCut(new CutTaggedJetPt1(particlesObj));
    // Cut: Tagged jet eta of Jet 1
    //mystudy.AddCut(new CutTaggedJetEta1(particlesObj));

     // ************** Trigger Selection ********************
    // Cut: TriggerOR
    //if(! mystudy.DoFastSim()) mystudy.AddCut(new CutTriggerOR(particlesObj,"NOTHINGPASSED"));
//    mystudy.AddCut(new CutTriggerOR(particlesObj,"NOTHINGPASSED"));//NONE means no trigger
   
  /////////////////////////////////////////////////////////////
  
  //The following is for multivariate analysis studies, will soon be outdate,
  //replaced with variables from a tree rather than calculated in another file

  // Finally, make histograms/Tree of topological variables and write out
  // a separate skim tree with them
   TFile *_skimBDTFile;
   if (! mystudy.DoOnlyMVATree()){
     TString NNname = mystudy.GetHistogramFileName() + "skimBDT.root" ;
     _skimBDTFile = new TFile(NNname,"RECREATE"); 
     mystudy.AddCut(new HistogrammingWtDiLepTopology(particlesObj, _skimBDTFile));
   }
// Write out the runNumber EventNumber passed final selection to a file
   mystudy.AddCut(new HistogrammingEventList(particlesObj, evtListFileName));

  cout << "<driver> Starting Loop over events in chain" << endl << endl;
  // Loop over events in chain
  //Here is where the events are actually looped and the cuts and histograms above are made
  mystudy.Loop();
  cout << "<driver> Finished Loop over events in chain" << endl;

  // Write output to files
  cout << "<driver> " << "Writing histograms to file: " << mystudy.GetHistogramFileName() << endl;
  
  if (! mystudy.DoOnlyMVATree()){
    _skimBDTFile->Write(); 
    _skimBDTFile->Close(); 
  }
  mystudy.Finish();
  
  // Delete chains and set pointers to NULL
  cout << "<driver> Deleting chains" << endl;

if(chainReco)       delete chainReco;
  if(chainTruth)      delete chainTruth;
  if(chainTrigger)    delete chainTrigger;
  if(chainInfo)       delete chainInfo;
  if(chainDecision)       delete chainDecision;
   if(chainFastSim)    delete chainFastSim;
//  if(chainMVA)    delete chainMVA;

  //if(chainCollection) delete chainCollection;

  chainReco       = NULL;
  chainTruth      = NULL;
  chainTrigger    = NULL;
  chainInfo       = NULL;
  chainDecision    = NULL;
   chainFastSim    = NULL;
//  chainMVA    = NULL;
  
  cout << "<driver> Sucessful Completion." << endl;
  return 0;
}
